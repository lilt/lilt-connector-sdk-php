<?php
/**
 * NewJobOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LiltConnectorSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lilt Connector Plugin API
 *
 * This document describes the Plugin API for Lilt's Connector platform. The Plugin API is intented to be used by developers who wish to build integrations into their desired systems. The purpose of this API is to enable content transfer and status monitoring for localization projects.  - Read more about the concepts and workflows in the   [user guide](/docs/api/v1.0). - Test the API interactively via [Swagger UI](/api/v1.0/ui).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LiltConnectorSDK\Model;

use \ArrayAccess;
use \LiltConnectorSDK\ObjectSerializer;

/**
 * NewJobOptions Class Doc Comment
 *
 * @category Class
 * @package  LiltConnectorSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NewJobOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'new_job_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'project_prefix' => 'string',
        'project_name_template' => 'string',
        'lilt_translation_workflow' => 'string',
        'lilt_default_due_date' => 'string',
        'lilt_target_languages' => 'string[]',
        'handle_credit_transactions' => 'bool',
        'source_word_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'project_prefix' => null,
        'project_name_template' => null,
        'lilt_translation_workflow' => null,
        'lilt_default_due_date' => null,
        'lilt_target_languages' => null,
        'handle_credit_transactions' => null,
        'source_word_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'project_prefix' => false,
		'project_name_template' => false,
		'lilt_translation_workflow' => false,
		'lilt_default_due_date' => false,
		'lilt_target_languages' => false,
		'handle_credit_transactions' => false,
		'source_word_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_prefix' => 'project_prefix',
        'project_name_template' => 'project_name_template',
        'lilt_translation_workflow' => 'lilt_translation_workflow',
        'lilt_default_due_date' => 'lilt_default_due_date',
        'lilt_target_languages' => 'lilt_target_languages',
        'handle_credit_transactions' => 'handle_credit_transactions',
        'source_word_count' => 'source_word_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_prefix' => 'setProjectPrefix',
        'project_name_template' => 'setProjectNameTemplate',
        'lilt_translation_workflow' => 'setLiltTranslationWorkflow',
        'lilt_default_due_date' => 'setLiltDefaultDueDate',
        'lilt_target_languages' => 'setLiltTargetLanguages',
        'handle_credit_transactions' => 'setHandleCreditTransactions',
        'source_word_count' => 'setSourceWordCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_prefix' => 'getProjectPrefix',
        'project_name_template' => 'getProjectNameTemplate',
        'lilt_translation_workflow' => 'getLiltTranslationWorkflow',
        'lilt_default_due_date' => 'getLiltDefaultDueDate',
        'lilt_target_languages' => 'getLiltTargetLanguages',
        'handle_credit_transactions' => 'getHandleCreditTransactions',
        'source_word_count' => 'getSourceWordCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LILT_TRANSLATION_WORKFLOW_INSTANT = 'INSTANT';
    public const LILT_TRANSLATION_WORKFLOW_VERIFIED = 'VERIFIED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLiltTranslationWorkflowAllowableValues()
    {
        return [
            self::LILT_TRANSLATION_WORKFLOW_INSTANT,
            self::LILT_TRANSLATION_WORKFLOW_VERIFIED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('project_prefix', $data ?? [], null);
        $this->setIfExists('project_name_template', $data ?? [], null);
        $this->setIfExists('lilt_translation_workflow', $data ?? [], null);
        $this->setIfExists('lilt_default_due_date', $data ?? [], null);
        $this->setIfExists('lilt_target_languages', $data ?? [], null);
        $this->setIfExists('handle_credit_transactions', $data ?? [], false);
        $this->setIfExists('source_word_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLiltTranslationWorkflowAllowableValues();
        if (!is_null($this->container['lilt_translation_workflow']) && !in_array($this->container['lilt_translation_workflow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lilt_translation_workflow', must be one of '%s'",
                $this->container['lilt_translation_workflow'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project_prefix
     *
     * @return string|null
     */
    public function getProjectPrefix()
    {
        return $this->container['project_prefix'];
    }

    /**
     * Sets project_prefix
     *
     * @param string|null $project_prefix A string value to include in the Project name.
     *
     * @return self
     */
    public function setProjectPrefix($project_prefix)
    {
        if (is_null($project_prefix)) {
            throw new \InvalidArgumentException('non-nullable project_prefix cannot be null');
        }
        $this->container['project_prefix'] = $project_prefix;

        return $this;
    }

    /**
     * Gets project_name_template
     *
     * @return string|null
     */
    public function getProjectNameTemplate()
    {
        return $this->container['project_name_template'];
    }

    /**
     * Sets project_name_template
     *
     * @param string|null $project_name_template The template string to use when generating Project names.  The available template options are:  - **today** - Today's date. Formatted as YYYY-MM-DD. - **trglocale** - The target locale for the given project. - **filename** - The name of the current file being uploaded. - **project_prefix** - The project_prefix value provided in the   configuration. - **project_name** - The project_name value assigned to the file in   the code. - **connector_id** - The Connector ID. - **connector_type** - The Connector Type (e.g. \"xtm\", \"salesforce\").
     *
     * @return self
     */
    public function setProjectNameTemplate($project_name_template)
    {
        if (is_null($project_name_template)) {
            throw new \InvalidArgumentException('non-nullable project_name_template cannot be null');
        }
        $this->container['project_name_template'] = $project_name_template;

        return $this;
    }

    /**
     * Gets lilt_translation_workflow
     *
     * @return string|null
     */
    public function getLiltTranslationWorkflow()
    {
        return $this->container['lilt_translation_workflow'];
    }

    /**
     * Sets lilt_translation_workflow
     *
     * @param string|null $lilt_translation_workflow lilt_translation_workflow
     *
     * @return self
     */
    public function setLiltTranslationWorkflow($lilt_translation_workflow)
    {
        if (is_null($lilt_translation_workflow)) {
            throw new \InvalidArgumentException('non-nullable lilt_translation_workflow cannot be null');
        }
        $allowedValues = $this->getLiltTranslationWorkflowAllowableValues();
        if (!in_array($lilt_translation_workflow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lilt_translation_workflow', must be one of '%s'",
                    $lilt_translation_workflow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lilt_translation_workflow'] = $lilt_translation_workflow;

        return $this;
    }

    /**
     * Gets lilt_default_due_date
     *
     * @return string|null
     */
    public function getLiltDefaultDueDate()
    {
        return $this->container['lilt_default_due_date'];
    }

    /**
     * Sets lilt_default_due_date
     *
     * @param string|null $lilt_default_due_date The due date to use when creating Lilt Jobs/Projects if no specific due date is specified on the file level.
     *
     * @return self
     */
    public function setLiltDefaultDueDate($lilt_default_due_date)
    {
        if (is_null($lilt_default_due_date)) {
            throw new \InvalidArgumentException('non-nullable lilt_default_due_date cannot be null');
        }
        $this->container['lilt_default_due_date'] = $lilt_default_due_date;

        return $this;
    }

    /**
     * Gets lilt_target_languages
     *
     * @return string[]|null
     */
    public function getLiltTargetLanguages()
    {
        return $this->container['lilt_target_languages'];
    }

    /**
     * Sets lilt_target_languages
     *
     * @param string[]|null $lilt_target_languages The list of target languages to use for the new job. The values provided should be present in the target_memories section of the configuration.
     *
     * @return self
     */
    public function setLiltTargetLanguages($lilt_target_languages)
    {
        if (is_null($lilt_target_languages)) {
            throw new \InvalidArgumentException('non-nullable lilt_target_languages cannot be null');
        }
        $this->container['lilt_target_languages'] = $lilt_target_languages;

        return $this;
    }

    /**
     * Gets handle_credit_transactions
     *
     * @return bool|null
     */
    public function getHandleCreditTransactions()
    {
        return $this->container['handle_credit_transactions'];
    }

    /**
     * Sets handle_credit_transactions
     *
     * @param bool|null $handle_credit_transactions If true, credit transactions will be handled by the connector. If false, no credit transactions will be created for the job.
     *
     * @return self
     */
    public function setHandleCreditTransactions($handle_credit_transactions)
    {
        if (is_null($handle_credit_transactions)) {
            throw new \InvalidArgumentException('non-nullable handle_credit_transactions cannot be null');
        }
        $this->container['handle_credit_transactions'] = $handle_credit_transactions;

        return $this;
    }

    /**
     * Gets source_word_count
     *
     * @return float|null
     */
    public function getSourceWordCount()
    {
        return $this->container['source_word_count'];
    }

    /**
     * Sets source_word_count
     *
     * @param float|null $source_word_count The source word count to use when creating credits transaction for instant transaltion jobs.
     *
     * @return self
     */
    public function setSourceWordCount($source_word_count)
    {
        if (is_null($source_word_count)) {
            throw new \InvalidArgumentException('non-nullable source_word_count cannot be null');
        }
        $this->container['source_word_count'] = $source_word_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


